
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <math.h>
#include <valarray>
using namespace std;

// Skip List Node Definition
struct Node {
    string name;
    int score;
    vector<Node*> forward; // Array of forward pointers for each level
    Node(string name,int value) {
        this->name = name;
        this->score = value;
    }
    Node(string player,int value, int level) : name(player), score(value), forward(level, nullptr){}
};

// Skip List Class Definition
class SkipList {
private:
    Node* header;      // The header (sentinel) node
    int maxLevel;      // The maximum level of the skip list
    int currentLevel;  // Current level of the skip list
    int nodeCount = 0;

public:
    SkipList(int maxLevel = 16) : maxLevel(maxLevel), currentLevel(0) {
        header = new Node("",-1, maxLevel);  // Initialize the header with a dummy value (-1)
        srand(time(0));  // Seed the random number generator
    }

    // Generate a random level for a new node
    int randomLevel() {
        int level = 1;
        while ((rand() % 2) && level < maxLevel) { // Randomly decide if the node should go to a higher level
            level++;
        }
        return level;
    }

    // Insert a value into the skip list

    void insert(string name,int value) {
        vector<Node*> update(maxLevel, nullptr);  // Store the nodes where we need to update pointers
        Node* current = header;

        // Start from the highest level and move downwards
        for (int i = currentLevel - 1; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->score < value) {
                current = current->forward[i];
            }
            update[i] = current;  // Store the node where the forward pointer needs to be updated
        }

        current = current->forward[0];  // Move to the next level (lowest level)

        // If the value doesn't exist, insert it
        if (current == nullptr || current->score != value) {
            int level = randomLevel();  // Determine the level for the new node
            if (level > currentLevel) {
                for (int i = currentLevel; i < level; i++) {
                    update[i] = header;  // Extend the update array
                }
                currentLevel = level;
            }

            Node* newNode = new Node(name,value, level);
            for (int i = 0; i < level; i++) {
                newNode->forward[i] = update[i]->forward[i];  // Set the forward pointers
                update[i]->forward[i] = newNode;  // Update the forward pointers at the levels
            }
            nodeCount++;
        }
    }
    void deleteNode(string name) {
        vector<Node*> update(maxLevel, nullptr); // Vector to store the nodes where pointers need to be updated
        Node* current = header;  // Start from the header node

        // Search for the node with the specified value and store the relevant nodes in update[]
        for (int i = currentLevel - 1; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->name != name) {
                current = current->forward[i];
            }
            update[i] = current; // Store the node where we need to update the forward pointer
        }
        // Move to the lowest level (0-level)
        current = current->forward[0];
        // If the node is not found, print a message and exit
        if (current == nullptr || current->name != name) {
            cout<<"player not found"<<endl;
        }
        else {
            for (int i = 0; i < currentLevel; i++) {
                if (update[i]->forward[i] == current) {
                    update[i]->forward[i] = current->forward[i];
                }
            }
            if(currentLevel > 0 && header->forward[currentLevel - 1] == nullptr) {
                currentLevel--;
            }
            delete current;
            nodeCount--;
        }
    }
    Node* searchNode(string name) {
        vector<Node*> update(maxLevel, nullptr); // Vector to store the nodes where pointers need to be updated
        Node* current = header;  // Start from the header node

        // Search for the node with the specified value and store the relevant nodes in update[]
        for (int i = currentLevel - 1; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->name != name) {
                current = current->forward[i];
            }
            update[i] = current; // Store the node where we need to update the forward pointer
        }
        // Move to the lowest level (0-level)
        // If the node is not found, print a message and exit
        current = current->forward[0];
        if (current == nullptr || current->name != name) {
            return nullptr;
        }
        return current;
    }
    // Display the Skip List (for testing and visualization)
    void display() {
        for (int i = 0; i < currentLevel; i++) {
            Node* node = header->forward[i];
            cout << "Level " << i + 1 << ": ";
            while (node != nullptr) {
                cout << node->name<<":"<<node->score << " ";
                node = node->forward[i];
            }
            cout << endl;
        }
    }
    void viewScore(string name) {
        vector<Node*> update(maxLevel, nullptr);
        Node* current = header;
        for (int i = currentLevel - 1; i >= 0; i--) {
            while (current->forward[i] != nullptr && current->forward[i]->name != name) {
                current = current->forward[i];
            }
            update[i] = current;
        }
        current = current->forward[0];
        if (current == nullptr || current->name != name) {
            cout<<"player not found"<<endl;
        }
        else {
            cout<<"player score :"<<current->score<<endl;
        }
    }
    void topN_player(int n) {
        vector<Node*> node;
        Node* current = header->forward[0];
        while (current != nullptr) {
            node.push_back(current);
            current = current->forward[0];
        }
        sort(node.begin(), node.end(), [](Node* a, Node* b) {return a->score > b->score;});
        cout<<"Top "<<n<<" player score:"<<endl;
        for (int i = 0; i < n && i < node.size(); i++) {
            cout<<node[i]->name<<":"<<node[i]->score<<endl;
        }
    }
    void scoreUp(string name , int value) {
        Node* current = searchNode(name);
        if (current != nullptr) {
            current->score += value;
            deleteNode(name);
            insert(name, current->score);
        }
        else {
            cout<<"No such player"<<endl;
        }

    }
    void scoreDown(string name , int value) {
        Node* current = searchNode(name);
        if (current != nullptr) {
            current->score -= value;
            deleteNode(name);
            insert(name, current->score);
        }
        else {
            cout<<"No such player"<<endl;
        }

    }
};
int main() {
    SkipList s(10);
    s.insert("hagar",91);
    s.insert("ola",50);
    s.insert("rawan",90);
    s.insert("lo",70);
    s.insert("har",65);
    s.insert("la",72);
    s.insert("rana",75);
    s.insert("lora",80);
    s.insert("hana",60);
    s.insert("noura",100);
    s.display();
    //s.topN_player(5);
    s.scoreUp("ola",30);
    s.display();
    //s.viewScore("hagar");
    //s.searchNode(3);
    //s.deleteNode("la");
    //cout<<"After deletion:\n";
    //s.display();
    return 0;

}
